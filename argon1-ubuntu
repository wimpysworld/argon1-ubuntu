#!/usr/bin/env bash

# Check if the user running the script is root
if [ "$(id -u)" -ne 0 ]; then
  echo "[!] ERROR: You need to be root."
  exit 1
fi

HOST_ARCH=$(uname -m)
if [ "${HOST_ARCH}" != "armv7l" ] && [ "${HOST_ARCH}" != "aarch64" ]; then
  echo "[!] This script is only intended to run on ARM devices."
  exit 1
fi

# Check if we're running on a Raspberry Pi
PI_MODEL=$(grep ^Model /proc/cpuinfo  | cut -d':' -f2- | sed 's/ R/R/')
if [[ "${PI_MODEL}" == *"Raspberry Pi"* ]]; then
  echo "[+] Configuring your ${PI_MODEL}"
else
  echo "[!] This is not a Raspberry Pi. Quitting!"
  exit 1
fi

# Check if we're running Ubuntu
IS_UBUNTU=$(lsb_release -is)
if [ "${IS_UBUNTU}" != "Ubuntu" ]; then
  echo "[!] This script is only intended to run on Ubuntu."
  exit 1
fi

daemonname="argononed"
powerbuttonscript="/usr/local/bin/${daemonname}"
shutdownscript="/lib/systemd/system-shutdown/${daemonname}-poweroff"
daemonconfigfile="/etc/${daemonname}.conf"
daemonfanservice="/lib/systemd/system/${daemonname}.service"

# Display help usage
function usage () {
  echo
  echo "Usage"
  echo "  $0 [options]"
  echo
  echo "Available options are"
  echo "  --config      Get help about how to configure the fan"
  echo "  --install     Install the Argon ONE Case Fan / Argon FanHAT driver"
  echo "  --uninstall   Uninstall the Argon ONE Case Fan / Argon FanHAT driver"
  echo
}

function config_argonone() {
    echo "Here is to current Argon fan configuration:"
    echo
    cat "${daemonconfigfile}"
    echo
    echo "Edit ${daemonconfigfile} to change your fan curve and then run"
    echo "sudo 'systemctl restart argononed.service' to activate the changes."
}

function install_argonone() {
    apt install -y python3-rpi.gpio python3-smbus i2c-tools

    if [ ! -f "${daemonconfigfile}" ]; then
        # Generate config file for fan speed
        cat <<'EOM' > "${daemonconfigfile}"
#
# Argon One Fan Configuration
#
# List below the temperature (Celsius) and fan speed (in percent) pairs
# Use the following form:
# min.temperature=speed
#
# Defaults; 10% fan speed when >= 55C, 55% fan speed when >= 60C, 100% fan speed when >= 65C
# 55=10
# 60=55
# 65=100
#
# Always on example, fan will always run at 100%
# 1=100
#
# Type the following at the command line for changes to take effect:
# sudo systemctl restart argononed.service
#
# Start below:
55=10
60=55
65=100
EOM
        chmod 644 "${daemonconfigfile}"
    fi

    # Generate script that runs every shutdown event
    cat <<'EOM' > "${shutdownscript}"
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# -*- mode: Python; tab-width: 4; indent-tabs-mode: nil; -*-
# PEP 8, PEP 263.
"""
Argon Systemd Shutdown script
"""

import sys
import smbus
import RPi.GPIO as GPIO

rev = GPIO.RPI_REVISION
if rev == 2 or rev == 3:
    bus = smbus.SMBus(1)
else:
    bus = smbus.SMBus(0)

if len(sys.argv) > 1:
    # TODO: Check this commit, is it required? Perhaps context invocation based on Pi model?
    # https://github.com/kounch/argonone/commit/973634f5b3795148b03ede2aeaae38b02c05c070
    bus.write_byte(0x1a,0)
    if sys.argv[1] == "poweroff" or sys.argv[1] == "halt":
        try:
            bus.write_byte_data(0x1a,0,0xFF)
        except:
            rev = 0
EOM
    chmod 755 "${shutdownscript}"

# Generate script to monitor shutdown button
    cat <<'EOM' > "${powerbuttonscript}"
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# -*- mode: Python; tab-width: 4; indent-tabs-mode: nil; -*-
# PEP 8, PEP 263.
"""
Argon One Fan and Button Service Daemon
"""

import smbus
import RPi.GPIO as GPIO
import os
import time
from threading import Thread

rev = GPIO.RPI_REVISION
if rev == 2 or rev == 3:
    bus = smbus.SMBus(1)
else:
    bus = smbus.SMBus(0)

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
shutdown_pin = 4
GPIO.setup(shutdown_pin, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)


def shutdown_check():
    while True:
        pulsetime = 1
        GPIO.wait_for_edge(shutdown_pin, GPIO.RISING)
        time.sleep(0.01)
        while GPIO.input(shutdown_pin) == GPIO.HIGH:
            time.sleep(0.01)
            pulsetime += 1
        if pulsetime >= 2 and pulsetime <= 3:
            # TODO: Use subprocess instead of os.system
            os.system("reboot")
        elif pulsetime >= 4 and pulsetime <= 5:
            # TODO: Use subprocess instead of os.system
            os.system("shutdown now -h")


def get_fanspeed(tempval, configlist):
    for curconfig in configlist:
        curpair = curconfig.split("=")
        tempcfg = float(curpair[0])
        fancfg = int(float(curpair[1]))
        if tempval >= tempcfg:
            return fancfg
    return 0


def load_config(fname):
    newconfig = []
    try:
        with open(fname, "r") as fp:
            for curline in fp:
                if not curline:
                    continue
                tmpline = curline.strip()
                if not tmpline:
                    continue
                # FIXME: Use startswith here
                if tmpline[0] == "#":
                    continue
                tmppair = tmpline.split("=")
                if len(tmppair) != 2:
                    continue
                tempval = 0
                fanval = 0
                try:
                    tempval = float(tmppair[0])
                    if tempval < 0 or tempval > 100:
                        continue
                except:
                    continue
                try:
                    fanval = int(float(tmppair[1]))
                    if fanval < 0 or fanval > 100:
                        continue
                except:
                    continue
                newconfig.append("{:5.1f}={}".format(tempval, fanval))
        if len(newconfig) > 0:
            newconfig.sort(reverse=True)
    except:
        return []
    return newconfig


def temp_check():
    fanconfig = ["65=100", "60=55", "55=10"]
    tmpconfig = load_config("/etc/argononed.conf")
    if len(tmpconfig) > 0:
        fanconfig = tmpconfig
    address = 0x1a
    prevblock = 0
    while True:
        # FIXME: Don't shell out to `cat` here, read the temp file directly
        temp = os.popen("cat /sys/class/thermal/thermal_zone0/temp").readline()
        val = float(int(temp)/1000)
        block = get_fanspeed(val, fanconfig)
        if block < prevblock:
            time.sleep(30)
        prevblock = block
        try:
            bus.write_byte(address, block)
        except IOError:
            temp = ""
        time.sleep(30)


try:
    t1 = Thread(target=shutdown_check)
    t2 = Thread(target=temp_check)
    t1.start()
    t2.start()
except:
    t1.stop()
    t2.stop()
    GPIO.cleanup()
EOM
    chmod 755 "${powerbuttonscript}"

    # Stop the service if it is already present.
    if [ -f "${daemonfanservice}" ]; then
        systemctl stop ${daemonname}.service
    fi

    cat <<"EOM" > "${daemonfanservice}"
[Unit]
Description=Argon One Fan and Button Service
After=multi-user.target
[Service]
Type=simple
Restart=always
RemainAfterExit=true
ExecStart=/usr/local/bin/argononed
[Install]
WantedBy=multi-user.target
EOM
    chmod 644 "${daemonfanservice}"

    systemctl daemon-reload
    systemctl enable ${daemonname}.service
    systemctl start ${daemonname}.service
}

function uninstall_argonone() {
    rm ${powerbuttonscript}
    rm ${shutdownscript}
    systemctl stop ${daemonname}.service
    systemctl disable ${daemonname}.service
    rm ${daemonfanservice}
    systemctl daemon-reload
    echo "Removed Argon One Services."
    echo "Cleanup will complete after restarting the device."
}

# Take command line arguments
if [ $# -lt 1 ]; then
    usage
    exit 0
else
    while [ $# -gt 0 ]; do
        case "${1}" in
            -config|--config)
            shift
            config_argonone
            exit 0;;
            -install|--install)
            shift
            install_argonone
            exit 0;;
            -uninstall|--uninstall)
            shift
            uninstall_argonone
            exit 0;;
            -h|--h|-help|--help)
            usage
            exit 0;;
            *)
            echo "[!] ERROR: \"${1}\" is not a supported parameter."
            usage
            exit 1;;
        esac
    done
fi
